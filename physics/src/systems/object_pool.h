// This file is part of VSTR Space Physics.
//
// Copyright 2021 Adam Sindelar
// License: http://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html
//
// Author(s): Adam Sindelar <adam@wowsignal.io>

#ifndef VSTR_SYSTEMS_OBJECT_POOL
#define VSTR_SYSTEMS_OBJECT_POOL

#include <absl/status/status.h>
#include <absl/status/statusor.h>
#include <absl/types/span.h>

#include "types/frame.h"

namespace vstr {

// Claims a free object from the pool and returns an event that will spawn it.
// Fails if there are no free objects.
absl::StatusOr<Event> SpawnEventFromPool(int32_t pool_id,
                                         const Vector3 &position,
                                         const Quaternion &rotation,
                                         const Vector3 &velocity, Frame &frame);

// Spawns the object from the event generated by SpawnEventFromPool.
void SpawnObject(const Event &spawn_event, Frame &frame);

// Releases the object back into its pool for future reuse. Does nothing if the
// object is not reusable. DOES NOT DESTROY THE OBJECT - the caller must do
// that, if desired.
void ReleaseObject(int32_t id, const std::vector<Flags> &flags,
                   std::vector<ReusePool> &reuse_pools,
                   std::vector<ReuseTag> &reuse_tags);

// Initializes the pool by copying the prototype up to capacity. The prototype
// will become one of the reusable objects and be set to destroyed in the
// process.
void InitializePool(int32_t pool_id, int32_t prototype_id, int32_t capacity,
                    Frame &frame);

}  // namespace vstr

#endif